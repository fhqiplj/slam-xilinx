// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="toplevel,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=624,HLS_SYN_LUT=805}" *)

module toplevel (
        ap_clk,
        ap_rst_n,
        m_axi_ocm_V_AWVALID,
        m_axi_ocm_V_AWREADY,
        m_axi_ocm_V_AWADDR,
        m_axi_ocm_V_AWID,
        m_axi_ocm_V_AWLEN,
        m_axi_ocm_V_AWSIZE,
        m_axi_ocm_V_AWBURST,
        m_axi_ocm_V_AWLOCK,
        m_axi_ocm_V_AWCACHE,
        m_axi_ocm_V_AWPROT,
        m_axi_ocm_V_AWQOS,
        m_axi_ocm_V_AWREGION,
        m_axi_ocm_V_AWUSER,
        m_axi_ocm_V_WVALID,
        m_axi_ocm_V_WREADY,
        m_axi_ocm_V_WDATA,
        m_axi_ocm_V_WSTRB,
        m_axi_ocm_V_WLAST,
        m_axi_ocm_V_WID,
        m_axi_ocm_V_WUSER,
        m_axi_ocm_V_ARVALID,
        m_axi_ocm_V_ARREADY,
        m_axi_ocm_V_ARADDR,
        m_axi_ocm_V_ARID,
        m_axi_ocm_V_ARLEN,
        m_axi_ocm_V_ARSIZE,
        m_axi_ocm_V_ARBURST,
        m_axi_ocm_V_ARLOCK,
        m_axi_ocm_V_ARCACHE,
        m_axi_ocm_V_ARPROT,
        m_axi_ocm_V_ARQOS,
        m_axi_ocm_V_ARREGION,
        m_axi_ocm_V_ARUSER,
        m_axi_ocm_V_RVALID,
        m_axi_ocm_V_RREADY,
        m_axi_ocm_V_RDATA,
        m_axi_ocm_V_RLAST,
        m_axi_ocm_V_RID,
        m_axi_ocm_V_RUSER,
        m_axi_ocm_V_RRESP,
        m_axi_ocm_V_BVALID,
        m_axi_ocm_V_BREADY,
        m_axi_ocm_V_BRESP,
        m_axi_ocm_V_BID,
        m_axi_ocm_V_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OCM_V_ID_WIDTH = 1;
parameter    C_M_AXI_OCM_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_OCM_V_DATA_WIDTH = 32;
parameter    C_M_AXI_OCM_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OCM_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OCM_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_OCM_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_OCM_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OCM_V_TARGET_ADDR = 0;
parameter    C_M_AXI_OCM_V_USER_VALUE = 0;
parameter    C_M_AXI_OCM_V_PROT_VALUE = 0;
parameter    C_M_AXI_OCM_V_CACHE_VALUE = 3;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_OCM_V_WSTRB_WIDTH = (C_M_AXI_OCM_V_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_ocm_V_AWVALID;
input   m_axi_ocm_V_AWREADY;
output  [C_M_AXI_OCM_V_ADDR_WIDTH - 1 : 0] m_axi_ocm_V_AWADDR;
output  [C_M_AXI_OCM_V_ID_WIDTH - 1 : 0] m_axi_ocm_V_AWID;
output  [7:0] m_axi_ocm_V_AWLEN;
output  [2:0] m_axi_ocm_V_AWSIZE;
output  [1:0] m_axi_ocm_V_AWBURST;
output  [1:0] m_axi_ocm_V_AWLOCK;
output  [3:0] m_axi_ocm_V_AWCACHE;
output  [2:0] m_axi_ocm_V_AWPROT;
output  [3:0] m_axi_ocm_V_AWQOS;
output  [3:0] m_axi_ocm_V_AWREGION;
output  [C_M_AXI_OCM_V_AWUSER_WIDTH - 1 : 0] m_axi_ocm_V_AWUSER;
output   m_axi_ocm_V_WVALID;
input   m_axi_ocm_V_WREADY;
output  [C_M_AXI_OCM_V_DATA_WIDTH - 1 : 0] m_axi_ocm_V_WDATA;
output  [C_M_AXI_OCM_V_WSTRB_WIDTH - 1 : 0] m_axi_ocm_V_WSTRB;
output   m_axi_ocm_V_WLAST;
output  [C_M_AXI_OCM_V_ID_WIDTH - 1 : 0] m_axi_ocm_V_WID;
output  [C_M_AXI_OCM_V_WUSER_WIDTH - 1 : 0] m_axi_ocm_V_WUSER;
output   m_axi_ocm_V_ARVALID;
input   m_axi_ocm_V_ARREADY;
output  [C_M_AXI_OCM_V_ADDR_WIDTH - 1 : 0] m_axi_ocm_V_ARADDR;
output  [C_M_AXI_OCM_V_ID_WIDTH - 1 : 0] m_axi_ocm_V_ARID;
output  [7:0] m_axi_ocm_V_ARLEN;
output  [2:0] m_axi_ocm_V_ARSIZE;
output  [1:0] m_axi_ocm_V_ARBURST;
output  [1:0] m_axi_ocm_V_ARLOCK;
output  [3:0] m_axi_ocm_V_ARCACHE;
output  [2:0] m_axi_ocm_V_ARPROT;
output  [3:0] m_axi_ocm_V_ARQOS;
output  [3:0] m_axi_ocm_V_ARREGION;
output  [C_M_AXI_OCM_V_ARUSER_WIDTH - 1 : 0] m_axi_ocm_V_ARUSER;
input   m_axi_ocm_V_RVALID;
output   m_axi_ocm_V_RREADY;
input  [C_M_AXI_OCM_V_DATA_WIDTH - 1 : 0] m_axi_ocm_V_RDATA;
input   m_axi_ocm_V_RLAST;
input  [C_M_AXI_OCM_V_ID_WIDTH - 1 : 0] m_axi_ocm_V_RID;
input  [C_M_AXI_OCM_V_RUSER_WIDTH - 1 : 0] m_axi_ocm_V_RUSER;
input  [1:0] m_axi_ocm_V_RRESP;
input   m_axi_ocm_V_BVALID;
output   m_axi_ocm_V_BREADY;
input  [1:0] m_axi_ocm_V_BRESP;
input  [C_M_AXI_OCM_V_ID_WIDTH - 1 : 0] m_axi_ocm_V_BID;
input  [C_M_AXI_OCM_V_BUSER_WIDTH - 1 : 0] m_axi_ocm_V_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg    ap_ready;
wire   [31:0] bla_V;
wire    ocm_V_AWREADY;
wire    ocm_V_WREADY;
wire    ocm_V_ARREADY;
wire    ocm_V_RVALID;
wire   [31:0] ocm_V_RDATA;
wire    ocm_V_RLAST;
wire   [0:0] ocm_V_RID;
wire   [0:0] ocm_V_RUSER;
wire   [1:0] ocm_V_RRESP;
wire    ocm_V_BVALID;
wire   [1:0] ocm_V_BRESP;
wire   [0:0] ocm_V_BID;
wire   [0:0] ocm_V_BUSER;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_221;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
end

toplevel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
toplevel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .bla_V(bla_V)
);

toplevel_ocm_V_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OCM_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OCM_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OCM_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OCM_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OCM_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OCM_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OCM_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OCM_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_OCM_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_OCM_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OCM_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OCM_V_CACHE_VALUE ))
toplevel_ocm_V_m_axi_U(
    .AWVALID(m_axi_ocm_V_AWVALID),
    .AWREADY(m_axi_ocm_V_AWREADY),
    .AWADDR(m_axi_ocm_V_AWADDR),
    .AWID(m_axi_ocm_V_AWID),
    .AWLEN(m_axi_ocm_V_AWLEN),
    .AWSIZE(m_axi_ocm_V_AWSIZE),
    .AWBURST(m_axi_ocm_V_AWBURST),
    .AWLOCK(m_axi_ocm_V_AWLOCK),
    .AWCACHE(m_axi_ocm_V_AWCACHE),
    .AWPROT(m_axi_ocm_V_AWPROT),
    .AWQOS(m_axi_ocm_V_AWQOS),
    .AWREGION(m_axi_ocm_V_AWREGION),
    .AWUSER(m_axi_ocm_V_AWUSER),
    .WVALID(m_axi_ocm_V_WVALID),
    .WREADY(m_axi_ocm_V_WREADY),
    .WDATA(m_axi_ocm_V_WDATA),
    .WSTRB(m_axi_ocm_V_WSTRB),
    .WLAST(m_axi_ocm_V_WLAST),
    .WID(m_axi_ocm_V_WID),
    .WUSER(m_axi_ocm_V_WUSER),
    .ARVALID(m_axi_ocm_V_ARVALID),
    .ARREADY(m_axi_ocm_V_ARREADY),
    .ARADDR(m_axi_ocm_V_ARADDR),
    .ARID(m_axi_ocm_V_ARID),
    .ARLEN(m_axi_ocm_V_ARLEN),
    .ARSIZE(m_axi_ocm_V_ARSIZE),
    .ARBURST(m_axi_ocm_V_ARBURST),
    .ARLOCK(m_axi_ocm_V_ARLOCK),
    .ARCACHE(m_axi_ocm_V_ARCACHE),
    .ARPROT(m_axi_ocm_V_ARPROT),
    .ARQOS(m_axi_ocm_V_ARQOS),
    .ARREGION(m_axi_ocm_V_ARREGION),
    .ARUSER(m_axi_ocm_V_ARUSER),
    .RVALID(m_axi_ocm_V_RVALID),
    .RREADY(m_axi_ocm_V_RREADY),
    .RDATA(m_axi_ocm_V_RDATA),
    .RLAST(m_axi_ocm_V_RLAST),
    .RID(m_axi_ocm_V_RID),
    .RUSER(m_axi_ocm_V_RUSER),
    .RRESP(m_axi_ocm_V_RRESP),
    .BVALID(m_axi_ocm_V_BVALID),
    .BREADY(m_axi_ocm_V_BREADY),
    .BRESP(m_axi_ocm_V_BRESP),
    .BID(m_axi_ocm_V_BID),
    .BUSER(m_axi_ocm_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(ocm_V_ARREADY),
    .I_ARADDR(ap_const_lv32_0),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_0),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(ocm_V_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(ocm_V_RDATA),
    .I_RID(ocm_V_RID),
    .I_RUSER(ocm_V_RUSER),
    .I_RRESP(ocm_V_RRESP),
    .I_RLAST(ocm_V_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ocm_V_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(ocm_V_WREADY),
    .I_WDATA(ap_const_lv32_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_0),
    .I_BVALID(ocm_V_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ocm_V_BRESP),
    .I_BID(ocm_V_BID),
    .I_BUSER(ocm_V_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_221) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_221 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

endmodule //toplevel
