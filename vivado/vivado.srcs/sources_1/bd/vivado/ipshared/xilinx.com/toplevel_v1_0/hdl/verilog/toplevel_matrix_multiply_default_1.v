// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toplevel_matrix_multiply_default_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        B_V_address0,
        B_V_ce0,
        B_V_q0,
        C_V_address0,
        C_V_ce0,
        C_V_we0,
        C_V_d0,
        aux_V_address0,
        aux_V_ce0,
        aux_V_q0
);

parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st11_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_3D = 32'b111101;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] B_V_address0;
output   B_V_ce0;
input  [35:0] B_V_q0;
output  [1:0] C_V_address0;
output   C_V_ce0;
output   C_V_we0;
output  [35:0] C_V_d0;
output  [1:0] aux_V_address0;
output   aux_V_ce0;
input  [35:0] aux_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg B_V_ce0;
reg C_V_ce0;
reg C_V_we0;
reg aux_V_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_20;
reg   [3:0] indvar_flatten1_reg_97;
reg   [1:0] Row_assign_reg_108;
reg   [3:0] indvar_flatten_reg_119;
reg   [1:0] Col_assign_reg_130;
reg   [1:0] Col_assign_2_reg_141;
wire   [0:0] exitcond_flatten1_fu_152_p2;
reg   [0:0] exitcond_flatten1_reg_390;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_61;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_reg_ppiten_pp0_it2;
reg    ap_reg_ppiten_pp0_it3;
reg    ap_reg_ppiten_pp0_it4;
reg    ap_reg_ppiten_pp0_it5;
reg    ap_reg_ppiten_pp0_it6;
reg    ap_reg_ppiten_pp0_it7;
reg    ap_reg_ppiten_pp0_it8;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter1;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter2;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter3;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter4;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter5;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter6;
reg   [0:0] ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter7;
wire   [3:0] indvar_flatten_next1_fu_158_p2;
wire   [1:0] tmp_mid2_v_fu_184_p3;
reg   [1:0] tmp_mid2_v_reg_399;
wire   [1:0] tmp_mid2_fu_242_p3;
reg   [1:0] tmp_mid2_reg_404;
reg   [1:0] C_V_addr_reg_409;
reg   [1:0] ap_reg_ppstg_C_V_addr_reg_409_pp0_iter1;
reg   [1:0] ap_reg_ppstg_C_V_addr_reg_409_pp0_iter2;
reg   [1:0] ap_reg_ppstg_C_V_addr_reg_409_pp0_iter3;
reg   [1:0] ap_reg_ppstg_C_V_addr_reg_409_pp0_iter4;
reg   [1:0] ap_reg_ppstg_C_V_addr_reg_409_pp0_iter5;
reg   [1:0] ap_reg_ppstg_C_V_addr_reg_409_pp0_iter6;
reg   [1:0] ap_reg_ppstg_C_V_addr_reg_409_pp0_iter7;
wire   [0:0] tmp_161_fu_303_p2;
reg   [0:0] tmp_161_reg_424;
reg   [0:0] ap_reg_ppstg_tmp_161_reg_424_pp0_iter1;
reg   [0:0] ap_reg_ppstg_tmp_161_reg_424_pp0_iter2;
reg   [0:0] ap_reg_ppstg_tmp_161_reg_424_pp0_iter3;
reg   [0:0] ap_reg_ppstg_tmp_161_reg_424_pp0_iter4;
reg   [0:0] ap_reg_ppstg_tmp_161_reg_424_pp0_iter5;
reg   [0:0] ap_reg_ppstg_tmp_161_reg_424_pp0_iter6;
reg   [0:0] ap_reg_ppstg_tmp_161_reg_424_pp0_iter7;
wire   [0:0] tmp_162_fu_309_p2;
reg   [0:0] tmp_162_reg_429;
reg   [0:0] ap_reg_ppstg_tmp_162_reg_429_pp0_iter1;
reg   [0:0] ap_reg_ppstg_tmp_162_reg_429_pp0_iter2;
reg   [0:0] ap_reg_ppstg_tmp_162_reg_429_pp0_iter3;
reg   [0:0] ap_reg_ppstg_tmp_162_reg_429_pp0_iter4;
reg   [0:0] ap_reg_ppstg_tmp_162_reg_429_pp0_iter5;
reg   [0:0] ap_reg_ppstg_tmp_162_reg_429_pp0_iter6;
reg   [0:0] ap_reg_ppstg_tmp_162_reg_429_pp0_iter7;
wire   [1:0] k_fu_315_p2;
wire   [3:0] indvar_flatten_next_fu_327_p3;
wire   [71:0] grp_fu_343_p2;
reg   [71:0] r_V_reg_453;
reg   [1:0] Row_assign_phi_fu_112_p4;
reg   [1:0] Col_assign_phi_fu_134_p4;
wire   [63:0] tmp_172_cast_fu_272_p1;
wire   [63:0] tmp_173_cast_fu_287_p1;
wire   [63:0] tmp_174_cast_fu_298_p1;
reg   [73:0] p_Val2_18_fu_58;
wire   [73:0] p_Val2_47_fu_361_p3;
wire   [0:0] exitcond_flatten7_fu_170_p2;
wire   [1:0] r_fu_164_p2;
wire   [2:0] tmp_fu_192_p3;
wire   [0:0] exitcond9_fu_210_p2;
wire   [0:0] not_exitcond_flatten_fu_204_p2;
wire   [1:0] Col_assign_mid_fu_176_p3;
wire   [0:0] exitcond_mid_fu_216_p2;
wire   [0:0] tmp_s_fu_228_p2;
wire   [1:0] c_fu_222_p2;
wire   [2:0] tmp_165_fu_254_p3;
wire   [3:0] tmp_168_cast_fu_200_p1;
wire   [3:0] tmp_mid2_cast_fu_250_p1;
wire   [3:0] tmp_159_fu_266_p2;
wire   [1:0] Col_assign_2_mid2_fu_234_p3;
wire   [3:0] tmp_171_cast_fu_262_p1;
wire   [3:0] tmp_i_i_cast_fu_277_p1;
wire   [3:0] tmp_160_fu_281_p2;
wire   [3:0] tmp_164_fu_292_p2;
wire   [3:0] indvar_flatten_op_fu_321_p2;
wire  signed [73:0] p_Val2_1_fu_352_p1;
wire   [73:0] p_Val2_s_fu_355_p2;
reg    ap_sig_cseq_ST_st11_fsm_2;
reg    ap_sig_335;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 ap_reg_ppiten_pp0_it0 = 1'b0;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_it2 = 1'b0;
#0 ap_reg_ppiten_pp0_it3 = 1'b0;
#0 ap_reg_ppiten_pp0_it4 = 1'b0;
#0 ap_reg_ppiten_pp0_it5 = 1'b0;
#0 ap_reg_ppiten_pp0_it6 = 1'b0;
#0 ap_reg_ppiten_pp0_it7 = 1'b0;
#0 ap_reg_ppiten_pp0_it8 = 1'b0;
end

toplevel_mul_36s_36s_72_7 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 36 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 72 ))
toplevel_mul_36s_36s_72_7_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(aux_V_q0),
    .din1(B_V_q0),
    .ce(1'b1),
    .dout(grp_fu_343_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten1_fu_152_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
            ap_reg_ppiten_pp0_it0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten1_fu_152_p2 == 1'b0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b1;
        end else if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond_flatten1_fu_152_p2 == 1'b0)))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it8 <= 1'b0;
    end else begin
        ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_152_p2 == 1'b0))) begin
        Col_assign_2_reg_141 <= k_fu_315_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Col_assign_2_reg_141 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_390 == 1'b0))) begin
        Col_assign_reg_130 <= tmp_mid2_reg_404;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Col_assign_reg_130 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_390 == 1'b0))) begin
        Row_assign_reg_108 <= tmp_mid2_v_reg_399;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        Row_assign_reg_108 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_152_p2 == 1'b0))) begin
        indvar_flatten1_reg_97 <= indvar_flatten_next1_fu_158_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        indvar_flatten1_reg_97 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_152_p2 == 1'b0))) begin
        indvar_flatten_reg_119 <= indvar_flatten_next_fu_327_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_119 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_flatten1_fu_152_p2 == 1'b0))) begin
        C_V_addr_reg_409 <= tmp_172_cast_fu_272_p1;
        tmp_161_reg_424 <= tmp_161_fu_303_p2;
        tmp_162_reg_429 <= tmp_162_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        ap_reg_ppstg_C_V_addr_reg_409_pp0_iter1 <= C_V_addr_reg_409;
        ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter1 <= exitcond_flatten1_reg_390;
        ap_reg_ppstg_tmp_161_reg_424_pp0_iter1 <= tmp_161_reg_424;
        ap_reg_ppstg_tmp_162_reg_429_pp0_iter1 <= tmp_162_reg_429;
        exitcond_flatten1_reg_390 <= exitcond_flatten1_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        ap_reg_ppstg_C_V_addr_reg_409_pp0_iter2 <= ap_reg_ppstg_C_V_addr_reg_409_pp0_iter1;
        ap_reg_ppstg_C_V_addr_reg_409_pp0_iter3 <= ap_reg_ppstg_C_V_addr_reg_409_pp0_iter2;
        ap_reg_ppstg_C_V_addr_reg_409_pp0_iter4 <= ap_reg_ppstg_C_V_addr_reg_409_pp0_iter3;
        ap_reg_ppstg_C_V_addr_reg_409_pp0_iter5 <= ap_reg_ppstg_C_V_addr_reg_409_pp0_iter4;
        ap_reg_ppstg_C_V_addr_reg_409_pp0_iter6 <= ap_reg_ppstg_C_V_addr_reg_409_pp0_iter5;
        ap_reg_ppstg_C_V_addr_reg_409_pp0_iter7 <= ap_reg_ppstg_C_V_addr_reg_409_pp0_iter6;
        ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter1;
        ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter3 <= ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter2;
        ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter4 <= ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter3;
        ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter5 <= ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter4;
        ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter6 <= ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter5;
        ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter7 <= ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter6;
        ap_reg_ppstg_tmp_161_reg_424_pp0_iter2 <= ap_reg_ppstg_tmp_161_reg_424_pp0_iter1;
        ap_reg_ppstg_tmp_161_reg_424_pp0_iter3 <= ap_reg_ppstg_tmp_161_reg_424_pp0_iter2;
        ap_reg_ppstg_tmp_161_reg_424_pp0_iter4 <= ap_reg_ppstg_tmp_161_reg_424_pp0_iter3;
        ap_reg_ppstg_tmp_161_reg_424_pp0_iter5 <= ap_reg_ppstg_tmp_161_reg_424_pp0_iter4;
        ap_reg_ppstg_tmp_161_reg_424_pp0_iter6 <= ap_reg_ppstg_tmp_161_reg_424_pp0_iter5;
        ap_reg_ppstg_tmp_161_reg_424_pp0_iter7 <= ap_reg_ppstg_tmp_161_reg_424_pp0_iter6;
        ap_reg_ppstg_tmp_162_reg_429_pp0_iter2 <= ap_reg_ppstg_tmp_162_reg_429_pp0_iter1;
        ap_reg_ppstg_tmp_162_reg_429_pp0_iter3 <= ap_reg_ppstg_tmp_162_reg_429_pp0_iter2;
        ap_reg_ppstg_tmp_162_reg_429_pp0_iter4 <= ap_reg_ppstg_tmp_162_reg_429_pp0_iter3;
        ap_reg_ppstg_tmp_162_reg_429_pp0_iter5 <= ap_reg_ppstg_tmp_162_reg_429_pp0_iter4;
        ap_reg_ppstg_tmp_162_reg_429_pp0_iter6 <= ap_reg_ppstg_tmp_162_reg_429_pp0_iter5;
        ap_reg_ppstg_tmp_162_reg_429_pp0_iter7 <= ap_reg_ppstg_tmp_162_reg_429_pp0_iter6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it8) & (ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter7 == 1'b0))) begin
        p_Val2_18_fu_58 <= p_Val2_47_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_reg_ppstg_exitcond_flatten1_reg_390_pp0_iter6 == 1'b0)) begin
        r_V_reg_453 <= grp_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten1_fu_152_p2 == 1'b0))) begin
        tmp_mid2_reg_404 <= tmp_mid2_fu_242_p3;
        tmp_mid2_v_reg_399 <= tmp_mid2_v_fu_184_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        B_V_ce0 = 1'b1;
    end else begin
        B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it8)) begin
        C_V_ce0 = 1'b1;
    end else begin
        C_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it8) & ~(1'b0 == ap_reg_ppstg_tmp_162_reg_429_pp0_iter7))) begin
        C_V_we0 = 1'b1;
    end else begin
        C_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_390 == 1'b0))) begin
        Col_assign_phi_fu_134_p4 = tmp_mid2_reg_404;
    end else begin
        Col_assign_phi_fu_134_p4 = Col_assign_reg_130;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten1_reg_390 == 1'b0))) begin
        Row_assign_phi_fu_112_p4 = tmp_mid2_v_reg_399;
    end else begin
        Row_assign_phi_fu_112_p4 = Row_assign_reg_108;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | (1'b1 == ap_sig_cseq_ST_st11_fsm_2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_61) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_335) begin
        ap_sig_cseq_ST_st11_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (1'b1 == ap_reg_ppiten_pp0_it0))) begin
        aux_V_ce0 = 1'b1;
    end else begin
        aux_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : begin
            if ((~((1'b1 == ap_reg_ppiten_pp0_it8) & ~(1'b1 == ap_reg_ppiten_pp0_it7)) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten1_fu_152_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((1'b1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten1_fu_152_p2 == 1'b0) & ~(1'b1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st11_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_2;
            end
        end
        ap_ST_st11_fsm_2 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_V_address0 = tmp_173_cast_fu_287_p1;

assign C_V_address0 = ap_reg_ppstg_C_V_addr_reg_409_pp0_iter7;

assign C_V_d0 = {{p_Val2_47_fu_361_p3[ap_const_lv32_3D : ap_const_lv32_1A]}};

assign Col_assign_2_mid2_fu_234_p3 = ((tmp_s_fu_228_p2[0:0] === 1'b1) ? ap_const_lv2_0 : Col_assign_2_reg_141);

assign Col_assign_mid_fu_176_p3 = ((exitcond_flatten7_fu_170_p2[0:0] === 1'b1) ? ap_const_lv2_0 : Col_assign_phi_fu_134_p4);

always @ (*) begin
    ap_sig_20 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_335 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_61 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign aux_V_address0 = tmp_174_cast_fu_298_p1;

assign c_fu_222_p2 = (Col_assign_mid_fu_176_p3 + ap_const_lv2_1);

assign exitcond9_fu_210_p2 = ((Col_assign_2_reg_141 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_152_p2 = ((indvar_flatten1_reg_97 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_flatten7_fu_170_p2 = ((indvar_flatten_reg_119 == ap_const_lv4_4) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_216_p2 = (exitcond9_fu_210_p2 & not_exitcond_flatten_fu_204_p2);

assign indvar_flatten_next1_fu_158_p2 = (indvar_flatten1_reg_97 + ap_const_lv4_1);

assign indvar_flatten_next_fu_327_p3 = ((exitcond_flatten7_fu_170_p2[0:0] === 1'b1) ? ap_const_lv4_1 : indvar_flatten_op_fu_321_p2);

assign indvar_flatten_op_fu_321_p2 = (indvar_flatten_reg_119 + ap_const_lv4_1);

assign k_fu_315_p2 = (Col_assign_2_mid2_fu_234_p3 + ap_const_lv2_1);

assign not_exitcond_flatten_fu_204_p2 = (exitcond_flatten7_fu_170_p2 ^ 1'b1);

assign p_Val2_1_fu_352_p1 = $signed(r_V_reg_453);

assign p_Val2_47_fu_361_p3 = ((ap_reg_ppstg_tmp_161_reg_424_pp0_iter7[0:0] === 1'b1) ? p_Val2_1_fu_352_p1 : p_Val2_s_fu_355_p2);

assign p_Val2_s_fu_355_p2 = ($signed(p_Val2_1_fu_352_p1) + $signed(p_Val2_18_fu_58));

assign r_fu_164_p2 = (Row_assign_phi_fu_112_p4 + ap_const_lv2_1);

assign tmp_159_fu_266_p2 = (tmp_168_cast_fu_200_p1 + tmp_mid2_cast_fu_250_p1);

assign tmp_160_fu_281_p2 = (tmp_171_cast_fu_262_p1 + tmp_i_i_cast_fu_277_p1);

assign tmp_161_fu_303_p2 = ((Col_assign_2_mid2_fu_234_p3 == ap_const_lv2_0) ? 1'b1 : 1'b0);

assign tmp_162_fu_309_p2 = ((Col_assign_2_mid2_fu_234_p3 == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign tmp_164_fu_292_p2 = (tmp_168_cast_fu_200_p1 + tmp_i_i_cast_fu_277_p1);

assign tmp_165_fu_254_p3 = {{tmp_mid2_fu_242_p3}, {1'b0}};

assign tmp_168_cast_fu_200_p1 = tmp_fu_192_p3;

assign tmp_171_cast_fu_262_p1 = tmp_165_fu_254_p3;

assign tmp_172_cast_fu_272_p1 = tmp_159_fu_266_p2;

assign tmp_173_cast_fu_287_p1 = tmp_160_fu_281_p2;

assign tmp_174_cast_fu_298_p1 = tmp_164_fu_292_p2;

assign tmp_fu_192_p3 = {{tmp_mid2_v_fu_184_p3}, {1'b0}};

assign tmp_i_i_cast_fu_277_p1 = Col_assign_2_mid2_fu_234_p3;

assign tmp_mid2_cast_fu_250_p1 = tmp_mid2_fu_242_p3;

assign tmp_mid2_fu_242_p3 = ((exitcond_mid_fu_216_p2[0:0] === 1'b1) ? c_fu_222_p2 : Col_assign_mid_fu_176_p3);

assign tmp_mid2_v_fu_184_p3 = ((exitcond_flatten7_fu_170_p2[0:0] === 1'b1) ? r_fu_164_p2 : Row_assign_phi_fu_112_p4);

assign tmp_s_fu_228_p2 = (exitcond_mid_fu_216_p2 | exitcond_flatten7_fu_170_p2);

endmodule //toplevel_matrix_multiply_default_1
